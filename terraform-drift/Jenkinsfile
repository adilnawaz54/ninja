pipeline {
    agent any

    tools {
        terraform 'tf 1.12'
    }

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo "üßπ Cleaning workspace..."
                deleteDir()
            }
        }

        stage('Checkout Code from GitHub') {
            steps {
                git url: 'https://github.com/adilnawaz54/ninja.git',
                    credentialsId: 'github54-token',
                    branch: 'main'
            }
        }

        stage('Terraform Init & Drift Detection') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'aws-access-key-id',
                            usernameVariable: 'ACCESS_KEY',
                            passwordVariable: 'SECRET_KEY'
                        )
                    ]) {
                        env.AWS_ACCESS_KEY_ID = "${ACCESS_KEY}"
                        env.AWS_SECRET_ACCESS_KEY = "${SECRET_KEY}"

                        def exitCode = sh(
                            script: '''
                                cd terraform-drift
                                echo " Terraform Version:"
                                terraform -version

                                echo " Initializing Terraform..."
                                terraform init -input=false

                                echo " Running Terraform Plan for Drift Detection..."
                                terraform plan -detailed-exitcode
                            ''',
                            returnStatus: true
                        )

                        if (exitCode == 0) {
                            echo " No drift detected."
                        } else if (exitCode == 2) {
                            echo " Drift detected!"
                            currentBuild.result = 'UNSTABLE'
                        } else {
                            error(" Terraform plan failed (exit code: ${exitCode})")
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { return currentBuild.result == 'UNSTABLE' }
            }
            steps {
                input message: " ‚ö†Ô∏è Drift detected. Do you want to apply these changes?"
                sh '''
                    cd terraform-drift
                    terraform apply -auto-approve
                '''
            }
        }
    }

    post {
        failure {
            echo " Build failed."
        }
        unstable {
            echo " Drift detected! Marking build as unstable."
        }
        success {
            echo " Build succeeded and no drift was detected."
        }
    }
}
